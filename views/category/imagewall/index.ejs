<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Thumbnails</title>
		<meta charset="UTF-8" />
        <meta name="description" content="Image Wall with jQuery and CSS3" />
        <meta name="keywords" content="wall, thumbnails"/>
		<meta name="author" content="Codrops" />
		<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
        <link rel="stylesheet" type="text/css" href="/css/style.css" />
		<link href='//fonts.googleapis.com/css?family=PT+Sans+Narrow' rel='stylesheet' type='text/css' />
		<link href='//fonts.googleapis.com/css?family=Wire+One' rel='stylesheet' type='text/css' />
    </head>
    <body>
		<div class="content">
			<header>
				<h1>Image Wall</h1>
				<iframe style="display: none;" frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=593007&auto=1&height=66"></iframe>
				<div id="container">
                        <a class="btn btn-default btn-lg " id="pickfiles" href="#" >
                            <i class="glyphicon glyphicon-plus"></i>
                            <span>Upload Image</span>
                        </a>
                </div>	
            </header>
			<div class="iw_wrapper j-container-img">
				<ul class="iw_thumbs" id="iw_thumbs">

					 <%
		                for(var i=0;i<results.length;i++){
		            %>
		                <li><img src="http:<%= results[i].attributes.sourceLink %>" data-img="<%= results[i].attributes.sourceLink %>" alt="<%= results[i].id %>"/><div><h2>CreatedAt</h2><p>
		                	<%= results[i].createdAt %>
		                </p></div></li>
		            <%
		                }
		             %>
				</ul>
			</div>
			<div id="iw_ribbon" class="iw_ribbon">
				<span class="iw_close"></span>
				<span class="iw_zoom">Click thumb to zoom</span>
			</div>
		</div>
		<div class="footer">
			<a href="/main">Back to Main</a>
		</div>
		<script src="//cdn.bootcss.com/jquery/2.1.3/jquery.min.js"></script>
		<script src="//cdn.bootcss.com/masonry/2.1.08/jquery.masonry.min.js"></script>
		<script src="//cdn.bootcss.com/jquery-easing/1.4.1/jquery.easing.min.js"></script>
		<script src="//cdn.staticfile.org/plupload/2.1.1/plupload.full.min.js"></script>
		<script src="/js/qiniu.js"></script>
		<script type="text/javascript">
			$(window).load(function(){
				var $iw_thumbs			= $('#iw_thumbs'),
					$iw_ribbon			= $('#iw_ribbon'),
					$iw_ribbon_close	= $iw_ribbon.children('span.iw_close'),
					$iw_ribbon_zoom		= $iw_ribbon.children('span.iw_zoom');

					ImageWall	= (function() {
							// window width and height
						var w_dim,
						    // index of current image
							current				= -1,
							isRibbonShown		= false,
							isFullMode			= false,
							// ribbon / images animation settings
							ribbonAnim			= {speed : 500, easing : 'easeOutExpo'},
							imgAnim				= {speed : 400, easing : 'jswing'},
							// init function : call masonry, calculate window dimentions, initialize some events
							init				= function() {
								$iw_thumbs.imagesLoaded(function(){
									$iw_thumbs.masonry({
										isAnimated	: true
									});
								});
								getWindowsDim();
								initEventsHandler();
							},
							// calculate window dimentions
							getWindowsDim		= function() {
								w_dim = {
									width	: $(window).width(),
									height	: $(window).height()
								};
							},
							// initialize some events
							initEventsHandler	= function() {

								// click on a image
								$iw_thumbs.delegate('li', 'click', function() {
									if($iw_ribbon.is(':animated')) return false;

									var $el = $(this);

									if($el.data('ribbon')) {
										showFullImage($el);
									}
									else if(!isRibbonShown) {
										isRibbonShown = true;

										$el.data('ribbon',true);

										// set the current
										current = $el.index();

										showRibbon($el);
									}
								});

								// click ribbon close
								$iw_ribbon_close.bind('click', closeRibbon);

								// on window resize we need to recalculate the window dimentions
								$(window).bind('resize', function() {
											getWindowsDim();
											if($iw_ribbon.is(':animated'))
												return false;
											closeRibbon();
										 })
								         .bind('scroll', function() {
											if($iw_ribbon.is(':animated'))
												return false;
											closeRibbon();
										 });

							},
							showRibbon			= function($el) {
								var	$img	= $el.children('img'),
									$descrp	= $img.next();

								// fadeOut all the other images
								$iw_thumbs.children('li').not($el).animate({opacity : 0.2}, imgAnim.speed);

								// increase the image z-index, and set the height to 100px (default height)
								$img.css('z-index', 100)
									.data('originalHeight',$img.height())
									.stop()
									.animate({
										height 		: '100px'
									}, imgAnim.speed, imgAnim.easing);

								// the ribbon will animate from the left or right
								// depending on the position of the image
								var ribbonCssParam 		= {
										top	: $el.offset().top - $(window).scrollTop() - 6 + 'px'
									},
									descriptionCssParam,
									dir;

								if( $el.offset().left < (w_dim.width / 2) ) {
									dir = 'left';
									ribbonCssParam.left 	= 0;
									ribbonCssParam.right 	= 'auto';
								}
								else {
									dir = 'right';
									ribbonCssParam.right 	= 0;
									ribbonCssParam.left 	= 'auto';
								}

								$iw_ribbon.css(ribbonCssParam)
								          .show()
										  .stop()
										  .animate({width : '100%'}, ribbonAnim.speed, ribbonAnim.easing, function() {
												switch(dir) {
													case 'left' :
														descriptionCssParam		= {
															'left' 			: $img.outerWidth(true) + 'px',
															'text-align' 	: 'left'
														};
														break;
													case 'right' :
														descriptionCssParam		= {
															'left' 			: '-200px',
															'text-align' 	: 'right'
														};
														break;
												};
												$descrp.css(descriptionCssParam).fadeIn();
												// show close button and zoom
												$iw_ribbon_close.show();
												$iw_ribbon_zoom.show();
										  });

							},
							// close the ribbon
							// when in full mode slides in the middle of the page
							// when not slides left
							closeRibbon			= function() {
								isRibbonShown 	= false

								$iw_ribbon_close.hide();
								$iw_ribbon_zoom.hide();

								if(!isFullMode) {

									// current wall image
									var $el	 		= $iw_thumbs.children('li').eq(current);

									resetWall($el);

									// slide out ribbon
									$iw_ribbon.stop()
											  .animate({width : '0%'}, ribbonAnim.speed, ribbonAnim.easing);

								}
								else {
									$iw_ribbon.stop().animate({
										opacity		: 0.8,
										height 		: '0px',
										marginTop	: w_dim.height/2 + 'px' // half of window height
									}, ribbonAnim.speed, function() {
										$iw_ribbon.css({
											'width'		: '0%',
											'height'	: '126px',
											'margin-top': '0px'
										}).children('img').remove();
									});

									isFullMode	= false;
								}
							},
							resetWall			= function($el) {
								var $img		= $el.children('img'),
									$descrp		= $img.next();

								$el.data('ribbon',false);

								// reset the image z-index and height
								$img.css('z-index',1).stop().animate({
									height 		: $img.data('originalHeight')
								}, imgAnim.speed,imgAnim.easing);

								// fadeOut the description
								$descrp.fadeOut();

								// fadeIn all the other images
								$iw_thumbs.children('li').not($el).animate({opacity : 1}, imgAnim.speed);
							},
							showFullImage		= function($el) {
								isFullMode	= true;

								$iw_ribbon_close.hide();

								var	$img	= $el.children('img'),
									large	= $img.data('img'),

									// add a loading image on top of the image
									$loading = $('<span class="iw_loading"></span>');

								$el.append($loading);

								// preload large image
								$('<img/>').load(function() {
									var $largeImage	= $(this);

									$loading.remove();

									$iw_ribbon_zoom.hide();

									resizeImage($largeImage);

									// reset the current image in the wall
									resetWall($el);

									// animate ribbon in and out
									$iw_ribbon.stop().animate({
										opacity		: 1,
										height 		: '0px',
										marginTop	: '63px' // half of ribbons height
									}, ribbonAnim.speed, function() {
										// add the large image to the DOM
										$iw_ribbon.prepend($largeImage);

										$iw_ribbon_close.show();

										$iw_ribbon.animate({
											height 		: '100%',
											marginTop	: '0px',
											top			: '0px'
										}, ribbonAnim.speed);
									});
								}).attr('src',large);

							},
							resizeImage			= function($image) {
								var widthMargin		= 100,
									heightMargin 	= 100,

									windowH      	= w_dim.height - heightMargin,
									windowW      	= w_dim.width - widthMargin,
									theImage     	= new Image();

								theImage.src     	= $image.attr("src");

								var imgwidth     	= theImage.width,
									imgheight    	= theImage.height;

								if((imgwidth > windowW) || (imgheight > windowH)) {
									if(imgwidth > imgheight) {
										var newwidth 	= windowW,
											ratio 		= imgwidth / windowW,
											newheight 	= imgheight / ratio;

										theImage.height = newheight;
										theImage.width	= newwidth;

										if(newheight > windowH) {
											var newnewheight 	= windowH,
												newratio 		= newheight/windowH,
												newnewwidth 	= newwidth/newratio;

											theImage.width 		= newnewwidth;
											theImage.height		= newnewheight;
										}
									}
									else {
										var newheight 	= windowH,
											ratio 		= imgheight / windowH,
											newwidth 	= imgwidth / ratio;

										theImage.height = newheight;
										theImage.width	= newwidth;

										if(newwidth > windowW) {
											var newnewwidth 	= windowW,
											    newratio 		= newwidth/windowW,
												newnewheight 	= newheight/newratio;

											theImage.height 	= newnewheight;
											theImage.width		= newnewwidth;
										}
									}
								}

								$image.css({
									'width'			: theImage.width + 'px',
									'height'		: theImage.height + 'px',
									'margin-left'	: -theImage.width / 2 + 'px',
									'margin-top'	: -theImage.height / 2 + 'px'
								});
							};

						return {init : init};
					})();

				ImageWall.init();
			});

			$(function(){
				function S4() {
				   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
				}
				function guid() {
				   return (S4()+S4()+S4()+S4()+S4()+S4()+S4()+S4());
				}
				function sendImageInfo(options){
				  	$.ajax({
					  	url:"/imagewall/image",
					  	type:"post",
					  	data:options,
					  	success:function(result){
					  		console.dir(result);
					  	},
					  	error:function(error){

					  	}
					  });
				  }
				  var uploader = Qiniu.uploader({
					    disable_statistics_report: false,
					    runtimes: 'html5,flash,html4',
					    browse_button: 'pickfiles',
					    container: 'container',
					    drop_element: 'container',
					    max_file_size: '1000mb',
					    flash_swf_url: 'bower_components/plupload/js/Moxie.swf',
					    dragdrop: true,
					    chunk_size: '4mb',
					    multi_selection: !(moxie.core.utils.Env.OS.toLowerCase() === "ios"),
					    uptoken_url: 'uptoken',
					    // uptoken_func: function(){
					    //     var ajax = new XMLHttpRequest();
					    //     ajax.open('GET', $('#uptoken_url').val(), false);
					    //     ajax.setRequestHeader("If-Modified-Since", "0");
					    //     ajax.send();
					    //     if (ajax.status === 200) {
					    //         var res = JSON.parse(ajax.responseText);
					    //         console.log('custom uptoken_func:' + res.uptoken);
					    //         return res.uptoken;
					    //     } else {
					    //         console.log('custom uptoken_func err');
					    //         return '';
					    //     }
					    // },
					    domain: '//ouoc3ljn7.bkt.clouddn.com/',
					    get_new_uptoken: false,
					    //downtoken_url: '/downtoken',
					    // unique_names: true,
					    // save_key: true,
					    // x_vars: {
					    //     'id': '1234',
					    //     'time': function(up, file) {
					    //         var time = (new Date()).getTime();
					    //         // do something with 'time'
					    //         return time;
					    //     },
					    // },
					    auto_start: true,
					    log_level: 5,
			            filters: {
				            mime_types : [ //只允许上传图片
				                { title : "Image files", extensions : "jpg,jpeg,gif,png" },
				            ],
				            prevent_duplicates : false //不允许选取重复文件
				        },
				      init: {
				          'FilesAdded': function(up, files) {
				              plupload.each(files, function(file) {
				                  // 文件添加进队列后，处理相关的事情
				              });
				          },
				          'BeforeUpload': function(up, file) {
				                 // 每个文件上传前，处理相关的事情
				          },
				          'UploadProgress': function(up, file) {
				                 // 每个文件上传时，处理相关的事情
				          },
				          'FileUploaded': function(up, file, info) {
				                 // 每个文件上传成功后，处理相关的事情
				                 // 其中info是文件上传成功后，服务端返回的json，形式如：
				                 // {
				                 //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
				                 //    "key": "gogopher.jpg"
				                 //  }
				                 // 查看简单反馈
				                 // var domain = up.getOption('domain');
				                 // var res = parseJSON(info);
				                 // var sourceLink = domain +"/"+ res.key; 获取上传成功后的文件的Url
				                var domain = up.getOption('domain');
				                var res = $.parseJSON(info.response);
				                var imageInfo = Qiniu.imageInfo(res.key);
								sendImageInfo({
									key:res.key,
									width:imageInfo.width,
									height:imageInfo.height,
									format:imageInfo.format,
									sourceLink:domain + res.key,
									size:imageInfo.size
								});
				          },
				          'Error': function(up, err, errTip) {
				                 //上传出错时，处理相关的事情
				          },
				          'UploadComplete': function() {
				                 //队列文件处理完毕后，处理相关的事情
				                 location.reload();
				          },
				          'Key': function(up, file) {
				              // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
				              // 该配置必须要在unique_names: false，save_key: false时才生效

				              var key = guid();
				              // do something with key here
				              return key;
				          }
				      }
				  });

				  // domain为七牛空间对应的域名，选择某个空间后，可通过 空间设置->基本设置->域名设置 查看获取

				  // uploader为一个plupload对象，继承了所有plupload的方法
			});
		</script>
    </body>
</html>